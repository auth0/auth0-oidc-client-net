trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: pack
    packagesToPack: '**/*.nuspec'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: CmdLine@2
  displayName: 'Publish to Nuget'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/foo'))
  inputs:
    script: 'nuget push $(Build.ArtifactStagingDirectory)\**\*.nupkg -ApiKey $(NugetApiKey) -Source https://api.nuget.org/v3/index.json -SkipDuplicate -NonInteractive'

- task: Bash@3
  displayName: 'Read Package Version'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/azure-pipelines'))
  inputs:
    targetType: 'inline'
    script: |
      read_package_version () {
         local nugetFile=$(find "$(Build.ArtifactStagingDirectory)" -path "**/$1*.nupkg")

         [[ $nugetFile =~ (.*)($1)(.*)(.nupkg) ]]

         echo ${BASH_REMATCH[3]}
      }

      expose_package_version () {
          echo "$1: $2"
          echo "##vso[task.setvariable variable=$1;]$2"
      }

      read_and_expose_package_versions () {
          expose_package_version "VERSION" $(read_package_version "Auth0.OidcClient.Core.")
          expose_package_version "COREVERSION" $(read_package_version "Auth0.OidcClient.Core.")
          expose_package_version "Auth0_OidcClient_Core_VERSION" $(read_package_version "Auth0.OidcClient.Core.")
          expose_package_version "Auth0_OidcClient_WPF_VERSION" $(read_package_version "Auth0.OidcClient.WPF.")
          expose_package_version "Auth0_OidcClient_WinForms_VERSION" $(read_package_version "Auth0.OidcClient.WinForms.")
      }

      read_and_expose_package_versions

- task: Bash@3
  displayName: 'Test Version'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/azure-pipelines'))
  inputs:
    targetType: 'inline'
    script: |
      echo "${VERSION}"
      echo "${COREVERSION}"
      echo "${Auth0_OidcClient_Core_VERSION}"
      echo "${Auth0_OidcClient_WPF_VERSION}"
      echo "${Auth0_OidcClient_WinForms_VERSION}"
