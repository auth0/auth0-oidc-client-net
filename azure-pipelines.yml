trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: pack
    packagesToPack: '**/*.nuspec'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: CmdLine@2
  displayName: 'Publish to Nuget'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/foo'))
  inputs:
    script: 'nuget push $(Build.ArtifactStagingDirectory)\**\*.nupkg -ApiKey $(NugetApiKey) -Source https://api.nuget.org/v3/index.json -SkipDuplicate -NonInteractive'

- task: Bash@3
  displayName: 'Read Package Version'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/azure-pipelines'))
  inputs:
    targetType: 'inline'
    script: |
      read_package_version () {
         local nugetFile=$(find "$(Build.ArtifactStagingDirectory)" -path "**/$1*.nupkg")

         [[ $nugetFile =~ (.*)($1)(.*)(.nupkg) ]]

         echo ${BASH_REMATCH[3]}
      }

      expose_package_version () {
          echo "$1: $2"
          echo "##vso[task.setvariable variable=$1;]$2"
      }

      read_and_expose_package_versions () {
          expose_package_version "AUTH0_OIDCCLIENT_CORE_VERSION" $(read_package_version "Auth0.OidcClient.Core.")
          expose_package_version "AUTH0_OIDCCLIENT_WPF_VERSION" $(read_package_version "Auth0.OidcClient.WPF.")
          expose_package_version "AUTH0_OIDCCLIENT_WINFORMS_VERSION" $(read_package_version "Auth0.OidcClient.WinForms.")
          expose_package_version "AUTH0_OIDCCLIENT_UWP_VERSION" $(read_package_version "Auth0.OidcClient.UWP.")
          expose_package_version "AUTH0_OIDCCLIENT_ANDROID_VERSION" $(read_package_version "Auth0.OidcClient.Android.")
          expose_package_version "AUTH0_OIDCCLIENT_ANDROIDX_VERSION" $(read_package_version "Auth0.OidcClient.AndroidX.")
          expose_package_version "AUTH0_OIDCCLIENT_IOS_VERSION" $(read_package_version "Auth0.OidcClient.iOS.")
      }

      read_and_expose_package_versions

- task: Bash@3
  displayName: 'Test Version'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/azure-pipelines'))
  inputs:
    targetType: 'inline'
    script: |
      echo "${AUTH0_OIDCCLIENT_CORE_VERSION}"
      echo "${AUTH0_OIDCCLIENT_WPF_VERSION}"
      echo "${AUTH0_OIDCCLIENT_WINFORMS_VERSION}"
      echo "${AUTH0_OIDCCLIENT_UWP_VERSION}"
      echo "${AUTH0_OIDCCLIENT_ANDROID_VERSION}"
      echo "${AUTH0_OIDCCLIENT_ANDROIDX_VERSION}"
      echo "${AUTH0_OIDCCLIENT_IOS_VERSION}"

- task: Bash@3
  displayName: 'Publish to GitHub'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/azure-pipelines'))
  inputs:
    targetType: 'inline'
    script: |
      create_release () {
           local TAG="$1"

           if ! git show-ref --tags "$TAG"; then
              echo "Tag with name '$TAG' not yet published."
          else
              echo "Tag with name '$TAG' is already published."
          fi
      }
 
      release_to_github () {
          LOCAL_VERSION="${!PACKAGE_VERSION_KEY}"
          # Check if $LOCAL_VERSION is defined
          if [[ -z "$LOCAL_VERSION" ]]; then
              echo "ERROR: The '$PACKAGE_VERSION_KEY' variable must be set to the package version."
              exit 1
          fi

          GH_TOKEN="${!GH_TOKEN_KEY}"
          # Check if $GH_TOKEN is defined
          if [[ -z "$GH_TOKEN" ]]; then
              echo "ERROR: The '$GH_TOKEN_KEY' variable must be set to a Github access token."
              exit 1
          fi

          # Check if the API URL can be constructed
          if [[ -z "$PROJECT_USERNAME" ]] || [[ -z "$PROJECT_REPONAME" ]]; then
              echo "ERROR: The variables 'PROJECT_USERNAME' and/or 'PROJECT_REPONAME' are not defined."
              exit 1
          fi

          if [ "$PREFIX_TAG" = true ] || [ "$PREFIX_TAG" = 1 ]; then LOCAL_VERSION="v$LOCAL_VERSION"; fi

          echo "Pulling remote tags..."
          git fetch --tags

          create_release "core-$AUTH0_OIDCCLIENT_CORE_VERSION"
      }

      release_to_github
