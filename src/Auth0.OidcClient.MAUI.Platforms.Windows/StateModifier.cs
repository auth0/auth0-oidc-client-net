using System.Text.Json.Nodes;

namespace Auth0.OidcClient.Platforms.Windows;

internal class StateModifier
{
    internal static Uri MoveStateToReturnTo(Uri uri)
    {
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        // The state QueryString as generated by WinUIEx
        var state = query["state"];
        // The original returnTo as configured externally
        var returnTo = query["returnTo"];


        UriBuilder returnToBuilder = new UriBuilder(returnTo);

        // Get the original returnTo querystring params, so we can append state to it
        var returnToQuery = System.Web.HttpUtility.ParseQueryString(new Uri(returnTo).Query);
        // Append state as a querystring parameter to returnTo
        // We need to escape it for it to be accepted
        returnToQuery["state"] = Uri.EscapeDataString(state);
        // Set the query again on the returnTo url
        returnToBuilder.Query = returnToQuery.ToString();

        // Update returnTo in the original query so that it now includes state
        query["returnTo"] = returnToBuilder.Uri.ToString();

        UriBuilder logoutUrlBuilder = new UriBuilder(uri);
        // Set the query again on the logout url
        logoutUrlBuilder.Query = query.ToString();

        // Return the Uri so it can be used internally by WinUIEx to start the process and open the browser
        return logoutUrlBuilder.Uri;
    }

    internal static Uri ResetRawState(Uri uri)
    {
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var state = query["state"];

        JsonObject jsonObject;
        try
        {
            jsonObject = JsonNode.Parse(state ?? "{}") as JsonObject;

        }
        catch (Exception ex)
        {

            jsonObject = JsonNode.Parse(Uri.UnescapeDataString(state)) as JsonObject;
        }

        var originalState = jsonObject["state"];

        if (originalState is not null)
        {
            query["state"] = originalState.ToString();
        }
        else
        {
            query.Remove("state");
        }


        UriBuilder uriBuilder = new UriBuilder(uri);
        uriBuilder.Query = query.ToString();
        return uriBuilder.Uri;

    }
}