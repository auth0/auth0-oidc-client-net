namespace Auth0.OidcClient;

using IdentityModel.OidcClient.Browser;
using IdentityModel.Client;

/// <summary>
/// Implements the Browser <see cref="IBrowser"/> using <see cref="WebAuthenticator"/> for MAUI.
/// </summary>
public class WebAuthenticatorBrowser : IBrowser
{
    /// <inheritdoc />
    public async Task<BrowserResult> InvokeAsync(BrowserOptions options, CancellationToken cancellationToken = default)
    {
        try
        {
#if WINDOWS
            if (options.StartUrl.IndexOf("logout") > -1)
            {
                WinUIExEx.WebAuthenticator.BeforeProcessStart = (uri) =>
                {
                    var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                    // The state QueryString as generated by WinUIEx
                    var state = query["state"];
                    // The original returnTo as configured externally
                    var returnTo = query["returnTo"];

                    
                    UriBuilder returnToBuilder = new UriBuilder(returnTo);
                    
                    // Get the original returnTo querystring params, so we can append state to it
                    var returnToQuery = System.Web.HttpUtility.ParseQueryString(new Uri(returnTo).Query);
                    // Append state as a querystring parameter to returnTo
                    // We need to escape it for it to be accepted
                    returnToQuery["state"] = Uri.EscapeDataString(state);
                    // Set the query again on the returnTo url
                    returnToBuilder.Query = returnToQuery.ToString();

                    // Update returnTo in the original query so that it now includes state
                    query["returnTo"] = returnToBuilder.Uri.ToString();

                    UriBuilder logoutUrlBuilder = new UriBuilder(uri);
                    // Set the query again on the logout url
                    logoutUrlBuilder.Query = query.ToString();

                    // Return the Uri so it can be used internally by WinUIEx to start the process and open the browser
                    return logoutUrlBuilder.Uri;
                };
            } else {
              WinUIExEx.WebAuthenticator.BeforeProcessStart = null;
            }

            var result = await WinUIExEx.WebAuthenticator.AuthenticateAsync(new Uri(options.StartUrl), new Uri(options.EndUrl));
#else
            var result = await WebAuthenticator.Default.AuthenticateAsync(new Uri(options.StartUrl), new Uri(options.EndUrl));
#endif

            var url = new RequestUrl(options.EndUrl)
                .Create(new Parameters(result.Properties));

            return new BrowserResult
            {
                Response = url,
                ResultType = BrowserResultType.Success
            };
        }
        catch (TaskCanceledException)
        {
            return new BrowserResult
            {
                ResultType = BrowserResultType.UserCancel,
                ErrorDescription = "Login canceled by the user."
            };
        }
    }
}
